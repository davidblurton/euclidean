{"version":3,"sources":["webpack:///./routes/home/style.css","webpack:///./components/euclidean/index.tsx","webpack:///./components/slider/index.tsx","webpack:///./components/track/index.tsx","webpack:///./routes/home/index.tsx","webpack:///./components/slider/style.css","webpack:///./components/track/style.css"],"names":["module","exports","toPolygonPoints","points","map","point","x","y","join","Euclidean","n","pattern","offset","beat","width","height","radius","Math","PI","vertices","Array","from","_","i","angle","sin","cos","polygon","activePoints","filter","index","Boolean","getPointColor","viewBox","xmlns","style","fill","stroke","stroke-width","key","cx","cy","r","Slider","value","onChange","label","min","max","step","class","for","id","type","onInput","e","preventDefault","Number","target","Track","track","setFoo","useState","sequencer","useContext","SequencerContext","addEventListener","k","useSequencer","first","second","home","header","setK","setN","Home","props","tracks","Instrument","KICK","SNARE","HIHAT"],"mappings":"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","file":"route-home/index.tsx.chunk.31ae7.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"MseGdYp2PYS2X87nWDjYm\"};","import { h } from 'preact';\n\ninterface Props {\n    n: number;\n    pattern: number[];\n    offset: number;\n    beat: number;\n    width?: number;\n    height?: number;\n}\n\nconst circleRadius = 6;\n\n// const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);\n\ninterface Point {\n    x: number;\n    y: number;\n}\n\nfunction polygon(vertices: number, radius: number) {\n    return Array.from(Array(vertices), (_, i) => {\n        const angle = Math.PI - (i * 2 * Math.PI) / vertices;\n\n        const x = radius * Math.sin(angle);\n        const y = radius * Math.cos(angle);\n\n        return {\n            x,\n            y\n        };\n    });\n}\n\nfunction translate(x: number, y: number) {\n    return (point: Point) => {\n        return {\n            x: point.x + x,\n            y: point.y + y\n        };\n    };\n}\n\nfunction toPolygonPoints(points: Point[]) {\n    return points\n        .map((point: Point) => {\n            return `${point.x},${point.y}`;\n        })\n        .join(\" \");\n}\n\nconst Euclidean: preact.FunctionalComponent<Props> = ({\n    n,\n    pattern,\n    offset,\n    beat,\n    width = 400,\n    height = 400\n}) => {\n    const radius = width / Math.PI;\n\n    const points = polygon(n, radius).map(translate(width / 2, height / 2));\n\n    const activePoints = points.filter((_, index) => {\n        return Boolean(pattern[(index - offset + n) % n]);\n    });\n\n    const getPointColor = (index: number) => {\n        if (index === beat) {\n            return \"red\";\n        }\n\n        return pattern[index] === 1 ? \"black\" : \"white\";\n    };\n\n    return (\n        <svg\n            viewBox={`0 0 ${width} ${height}`}\n            width={width}\n            height={height}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            style={{ width: \"30vw\", height: \"30vw\" }}\n        >\n            <polygon\n                points={toPolygonPoints(points)}\n                fill=\"none\"\n                stroke=\"black\"\n            />\n\n            <polygon\n                points={toPolygonPoints(activePoints)}\n                fill=\"none\"\n                stroke=\"black\"\n                stroke-width=\"2\"\n            />\n\n            {points.map((point: Point, index: number) => {\n                return (\n                    <circle\n                        key={`circle${index}`}\n                        cx={point.x}\n                        cy={point.y}\n                        r={circleRadius}\n                        fill={getPointColor(index)}\n                        stroke=\"black\"\n                    />\n                );\n            })}\n        </svg>\n    );\n};\n\nexport default Euclidean;\n","import { h } from 'preact';\n\nimport * as style from './style.css';\n\nconst Slider = ({\n    value = 0,\n    onChange,\n    label = \"\",\n    min = 0,\n    max = 1,\n    step = 0.01\n}: {\n    value: number;\n    onChange: (value: number) => void;\n    label?: string;\n    min: number;\n    max: number;\n    step: number;\n}) => {\n    const handleChange = (e: Event) => {\n        e.preventDefault();\n\n        const target = e.target as HTMLInputElement;\n        onChange(Number(target.value));\n    };\n\n    return (\n        <div class={style.root}>\n            <label for={`${label}`} class={style.label}>\n                {label}\n            </label>\n            <input\n                id={`${label}`}\n                class={style.range}\n                type=\"range\"\n                min={min}\n                max={max}\n                step={step}\n                value={value}\n                onInput={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default Slider;\n","import { h } from 'preact';\nimport { useContext, useState } from 'preact/hooks';\n\nimport Euclidean from '../../components/euclidean';\nimport Slider from '../../components/slider';\nimport { SequencerContext, useSequencer } from '../../components/store';\nimport { Instrument } from '../types';\nimport style from './style.css';\n\ninterface Props {\n    track: Instrument;\n}\n\nconst Track: preact.FunctionalComponent<Props> = ({ track }) => {\n    // const [getRotation, setRotation] = useState(0);\n    const [_, setFoo] = useState(0);\n\n    const sequencer = useContext(SequencerContext);\n    sequencer.addEventListener(\"update\", () => setFoo(i => i + 1));\n\n    const { beat, pattern, k, n } = useSequencer()[track];\n\n    const first = Math.min(k, n);\n    const second = n;\n\n    const setK = (value: number) => {\n        sequencer.setK(track, value);\n    };\n\n    const setN = (value: number) => {\n        sequencer.setN(track, value);\n    };\n\n    return (\n        <div class={style.home}>\n            <Euclidean n={second} pattern={pattern} offset={0} beat={beat} />\n            <div class={style.header}>{`E(${first}, ${second})`}</div>\n\n            <Slider\n                min={1}\n                max={second}\n                step={1}\n                onChange={setK}\n                value={first}\n            />\n            <Slider min={1} max={16} step={1} onChange={setN} value={second} />\n            {/* <Slider\n                min={0}\n                max={second}\n                step={1}\n                onChange={setRotation}\n                value={getRotation}\n            /> */}\n        </div>\n    );\n};\n\nexport default Track;\n","import { h } from 'preact';\n\nimport Track from '../../components/track';\nimport { Instrument } from '../../components/types';\nimport * as style from './style.css';\n\ninterface Props {}\nconst Home: preact.FunctionalComponent<Props> = props => {\n    const tracks = [Instrument.KICK, Instrument.SNARE, Instrument.HIHAT];\n\n    return (\n        <div class={style.home}>\n            {tracks.map(track => (\n                <Track track={track} />\n            ))}\n        </div>\n    );\n};\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"_3aO5CRh2wYbuhagmKQl1HR\",\"range\":\"jLyU5gMc5228og_ZZtIoZ\",\"label\":\"qG6-WTftQ-e3RteB2184m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"_2JwScd256DmIo2yAVuk2Oy\",\"header\":\"_2UjwoAhB8NLBy3qA2NVzef\"};"],"sourceRoot":""}